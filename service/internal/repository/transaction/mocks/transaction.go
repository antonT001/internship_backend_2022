// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "user_balance/service/internal/models"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// Transaction is an autogenerated mock type for the Transaction type
type Transaction struct {
	mock.Mock
}

// Add provides a mock function with given fields: input
func (_m *Transaction) Add(input *models.TransactionFields) (sql.Result, error) {
	ret := _m.Called(input)

	var r0 sql.Result
	if rf, ok := ret.Get(0).(func(*models.TransactionFields) sql.Result); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.TransactionFields) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cancel provides a mock function with given fields: input
func (_m *Transaction) Cancel(input *models.TransactionConfirmFields) (sql.Result, error) {
	ret := _m.Called(input)

	var r0 sql.Result
	if rf, ok := ret.Get(0).(func(*models.TransactionConfirmFields) sql.Result); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.TransactionConfirmFields) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Confirm provides a mock function with given fields: input
func (_m *Transaction) Confirm(input *models.TransactionConfirmFields) (sql.Result, error) {
	ret := _m.Called(input)

	var r0 sql.Result
	if rf, ok := ret.Get(0).(func(*models.TransactionConfirmFields) sql.Result); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.TransactionConfirmFields) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: input
func (_m *Transaction) List(input *models.TransactionListIn) ([]models.TransactionListFields, error) {
	ret := _m.Called(input)

	var r0 []models.TransactionListFields
	if rf, ok := ret.Get(0).(func(*models.TransactionListIn) []models.TransactionListFields); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TransactionListFields)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.TransactionListIn) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransaction interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransaction creates a new instance of Transaction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransaction(t mockConstructorTestingTNewTransaction) *Transaction {
	mock := &Transaction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
