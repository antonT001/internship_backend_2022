// Package swagger GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/accounting/list": {
            "post": {
                "description": "Get list from report",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounting"
                ],
                "summary": "List",
                "parameters": [
                    {
                        "description": "payload",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AccountingList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.AccountingListOut"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    }
                }
            }
        },
        "/balance/add": {
            "post": {
                "description": "Add user balance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "balance"
                ],
                "summary": "Add",
                "parameters": [
                    {
                        "description": "payload",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    }
                }
            }
        },
        "/balance/get": {
            "post": {
                "description": "Get user balance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "balance"
                ],
                "summary": "Get",
                "parameters": [
                    {
                        "description": "payload",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BalanceGetIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.BalanceGetOut"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    }
                }
            }
        },
        "/transaction/add": {
            "post": {
                "description": "Add transaction, freeze user's money",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transaction"
                ],
                "summary": "Add",
                "parameters": [
                    {
                        "description": "payload",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    }
                }
            }
        },
        "/transaction/cancel": {
            "post": {
                "description": "Cancellation of the transaction, return money to the balance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transaction"
                ],
                "summary": "Cancel",
                "parameters": [
                    {
                        "description": "payload",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TransactionConfirm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    }
                }
            }
        },
        "/transaction/confirm": {
            "post": {
                "description": "Transaction confirmation, debiting money in favor of the company",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transaction"
                ],
                "summary": "Confirm",
                "parameters": [
                    {
                        "description": "payload",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TransactionConfirm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    }
                }
            }
        },
        "/transaction/list": {
            "post": {
                "description": "Get a list of user transactions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transaction"
                ],
                "summary": "List",
                "parameters": [
                    {
                        "description": "payload",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TransactionList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.TransactionListOut"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.Out"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.AccountingList": {
            "type": "object",
            "properties": {
                "month": {
                    "description": "Month:\n* 1 - 12",
                    "type": "integer",
                    "example": 10
                },
                "year": {
                    "description": "Year:\n* 2007 - this year",
                    "type": "integer",
                    "example": 2022
                }
            }
        },
        "models.AccountingListOut": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "path": {
                    "type": "string",
                    "example": "http://localhost:9000/static/2022/10/report102022.csv"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "models.BalanceFields": {
            "type": "object",
            "properties": {
                "money": {
                    "description": "Money:\n* The format of money without kopecks is used.\n* Example 12050=120 rubles 50 kopecks",
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer",
                    "example": 123
                }
            }
        },
        "models.BalanceGetIn": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "integer",
                    "example": 123
                }
            }
        },
        "models.BalanceGetOut": {
            "type": "object",
            "properties": {
                "balance": {
                    "$ref": "#/definitions/models.BalanceFields"
                },
                "error": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "models.Out": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "models.Transaction": {
            "type": "object",
            "properties": {
                "money": {
                    "description": "Money:\n* The format of money without kopecks is used.\n* Example 12050=120 rubles 50 kopecks",
                    "type": "integer"
                },
                "order_id": {
                    "type": "integer",
                    "example": 123
                },
                "service_id": {
                    "type": "integer",
                    "example": 123
                },
                "service_name": {
                    "type": "string"
                },
                "type": {
                    "description": "Type transaction:\n* 0 - withdrawal of money from the user's account\n* 1 - receipt of money on the user's account",
                    "type": "integer",
                    "enum": [
                        0,
                        1
                    ]
                },
                "user_id": {
                    "type": "integer",
                    "example": 123
                }
            }
        },
        "models.TransactionConfirm": {
            "type": "object",
            "properties": {
                "money": {
                    "description": "Money:\n* The format of money without kopecks is used.\n* Example 12050=120 rubles 50 kopecks",
                    "type": "integer"
                },
                "order_id": {
                    "type": "integer",
                    "example": 123
                },
                "service_id": {
                    "type": "integer",
                    "example": 123
                },
                "service_name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "example": 123
                }
            }
        },
        "models.TransactionFilter": {
            "type": "object",
            "properties": {
                "order_by": {
                    "description": "Sortable field\n* confirmed - data confirmed transaction\n* money - transaction money amount",
                    "type": "string",
                    "enum": [
                        "confirmed",
                        "money"
                    ]
                },
                "order_direction": {
                    "description": "Sort order:\n* ASC - Ascending, from A to Z.\n* DESC - Descending, from Z to A.",
                    "type": "string",
                    "enum": [
                        "ASC",
                        "DESC"
                    ]
                }
            }
        },
        "models.TransactionList": {
            "type": "object",
            "properties": {
                "filter": {
                    "$ref": "#/definitions/models.TransactionFilter"
                },
                "page_num": {
                    "description": "Pagination:\n* default page number = 0, the first n lines from the list are displayed.\n* If page number =1 then the following n lines are displayed\n* where n is a constant declared in the constants package - RESPONSE_LIMIT_DB",
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.TransactionListFields": {
            "type": "object",
            "properties": {
                "confirmed": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "money": {
                    "description": "Money:\n* The format of money without kopecks is used.\n* Example 12050=120 rubles 50 kopecks",
                    "type": "integer"
                },
                "order_id": {
                    "type": "integer"
                },
                "service_id": {
                    "type": "integer"
                },
                "service_name": {
                    "type": "string"
                },
                "type": {
                    "description": "Type transaction:\n* 0 - withdrawal of money from the user's account\n* 1 - receipt of money on the user's account",
                    "type": "integer",
                    "enum": [
                        0,
                        1
                    ]
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.TransactionListOut": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "transaction_list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.TransactionListFields"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:9000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Internship_backend_2022 API",
	Description:      "API Server for Internship_backend_2022 Application",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
